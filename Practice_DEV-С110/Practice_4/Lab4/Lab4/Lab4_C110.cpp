
#include <windows.h>
#include <conio.h>

#define stop __asm  nop
#define LEFT 75
#define RIGHT 77
#define UP 72
#define DOWN 80
#define ESC	27

/*************************************************************
Практическое занятие №2-курс-С110. Функции и динамические массивы
Использование функций, управляющих графическим выводом
*************************************************************/
// В проекте будет использоваться библиотека, которая содержит функции,
//управляющие графическим выводом на экран

//Для того, чтобы воспользоваться этими функциями, необходимо:
//1)В рабочий какталог проекта копировать файлы:
// GraphicsLib.h - содержит объявление функций
// GraphicsLib.lib - статическая библиотека, содержащая функции, управляющие графическим выводом 
// demo.exe - оконное приложение, отображением которого будем управлять с помощью функций библиотеки GraphicsLib.lib
//
//2) В проект добавить заголовочный файл GraphicsLib.h и файл библиотеки GraphicsLib.lib
//
//3) С помощью функций библиотеки  решить следующие задачи, например:
// 3.1 "Очистка" игрового поля (закраска цветом EMPTY) 
// 3.2 Рисование диагоналей прямоугольника
// 3.4 Рисование "концентрических" прямоугольников
// 3.4 Рисование  спирали
// 3.5 Рисование  закрашенных треугольников, ограниченных диагоналями и сторонами прямоугольника
// 3.6  и т.д. (творчество  приветствуется!)
// ИЛИ
//4) С помощью функций библиотеки разработать игровую программу с графическим интерфейсом "Змейка". Описание программы в отдельном файле.


// можно определить задержку отображения

#include <iostream>
#include "GraphicsLib.h"
int main()
{
	setlocale(LC_ALL, "Rus");

	//Запуск процесса demo.exe 
	StartDemo();
	
	//Задание размерностей двухмерного массива
	int n = 30, m = 30;
	SetDimensions(n, m);

	// Определение динамического двумерного массива (1-й способ)
	int *p = new int[n*m];
	int **pp = new int*[n];
	for (size_t i = 0; i < n; i++)
	{
		pp[i] = p + i * m;
	}
	//
	// Формирование значений динамического двумерного массива 
	// заполнение массива цветными шариками
	for (size_t i = 0; i < n; i++)
	{
		for (size_t j = 0; j < m; j++)
		{
			pp[i][j] = GREEN;
		}
	}
	//Отрисовка поля шариков
	DrawBalls(p, n, m);
	pause(1000);


	// реализацияя управления шариком
	bool flag = true;							// для завершения цикла

	// стартовые координаты шарика
	int x = n / 2;
	int y = m / 2;
	pp[x][y] = RED;

	// цикл управления шариком
	while (flag)
	{
		// отрисовка шарика
		DrawBalls(p, n, m);

		if (!_kbhit())
		{
			continue;
		}
		else {
			unsigned char ch = _getch();
			
			switch (ch)
			{
			case LEFT:
				pp[x][y] = GREEN;				// перекрашиваем прошлую позицию
				y--;
				pp[x][y] = RED;				// закрашиваем новую позицию
				std::cout << "Влево!" << std::endl;
				break;
			case RIGHT:
				pp[x][y] = GREEN;
				y++;
				pp[x][y] = RED;
				std::cout << "Вправо!" << std::endl;
				break;
			case UP:
				pp[x][y] = GREEN;
				x--;
				pp[x][y] = RED;
				std::cout << "Вверх!" << std::endl;
				break;
			case DOWN:
				pp[x][y] = GREEN;
				x++;
				pp[x][y] = RED;
				std::cout << "Вниз!" << std::endl;
				break;
			case ESC:
				std::cout << "EXIT!\n";
				flag = false;
				break;
			}
			
			if ((x == 0) || (x == -n) || (y == 0) || (y == m))
			{
				std::cout << "Граница" << std::endl;
				std::cout << "EXIT!\n";
				flag = false;
			}
		}

	}

	//std::cout << "Press any key\n";
	//std::cin.get();
	
	//Завершение процесса
	FinishDemo();
	
}

 