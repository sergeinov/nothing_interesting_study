/*************************************************************
	Практическое занятие №4. Встроенные массивы.
							Простейшие алгоритмы сортировки и поиска.
							
*************************************************************/

#include <cstdlib>
#include <ctime>
#include <iostream>

#define	  stop __asm nop

int main()
//Задания, помеченные * не являются обязательными. Но выполнение их крайне желательно!!!
{
	///////////////////////////////////////////////////////////////
	//			Указатели (продолжение)                              
	///////////////////////////////////////////////////////////////

			//Задание 1. Модификатор const. 
			//В каждом из заданий объявите указатель требуемого вида. 
			//Посредством каждого указателя попробуйте:
			//1) получить значение по адресу
			//2) записать новое значение по адресу
			//3) модифицировать указатель
	//Замечания:
	//1.операторы явного преобразования типа использовать не следует
	//2.если компилятор не позволяет выполнить операцию, то комментируйте эту строку с пояснением

	int value = 5;

	//Задание 1a. Указатель является константой. 

	int* const pvalue = &value;		// инициализация обязательна
	int temp = *pvalue;				// 5
	*pvalue = 6;					// ok
	// pvalue++;					// ошибка - указатель константный
	int* tempp = pvalue;			// ok
	stop


		//Задание 1б. Указываемое значение является константой.

		const int* pvalue1;		// инициализация необязательна
	pvalue1 = &value;
	int temp1 = *pvalue1;	// 5
	//*pvalue1 = 6;			// ошибка - значение является константой
	pvalue1++;				// ok
	//int* tempp1 = pvalue1;	// компилятор не позволить обычному указателю присвоить константное значение
	stop

		// *******************************************************


				//Задание 1в. И указатель, и указываемое значение
				//являются константами.

		const int* const pvalue2 = &value;	// инициализация обязательна
	int temp2 = *pvalue2;				// 5
	// *pvalue2 = 6;					// ошибка - значение является константой
	// pvalue2++;						// ошибка - значение является константой
	//int* tempp2 = pvalue2;			// компилятор не позволить обычному указателю присвоить константное значение
	stop

		// *******************************************************


				//Задание 1г. Указатель на переменную, объявленную с
				//ключевым словом const. 
		const int nN = 1;

	//Объявите указатель и проинициализируйте его выражением - &nN	

	const int* pnN = &nN;
	// int* pnN = &nN;						// компилятор не позволить обычному указателю присвоить константное значение

	// даже отведет память под такую перемнную
	stop


		// *******************************************************

			//Задание 2. Явное преобразование указателя. 
			//Иногда возникает необходимость одни и те же данные интерпретировать по-разному,

			//например, целое можно представить как совокупность четырех
			//байтов и работать с каждым байтом по отдельности. Для этого
			//нужно иметь возможность "указывать" как на целое, так и на байт. 

			//Следовательно, возникает необходимость явного преобразования указателя. 

			//Подсказка: для правильной интерпретации этого задания воспользуйтесь
			//возможностями отладчика представлять данные в интересующем
			//Вас виде (в данном случае - в шестнадцатеричном) - для
			//этого используйте правую клавишу мыши,находясь в окне

			//переменных и изменяйте пункт - Hexadecimal display !!!!!!!!!!!!!!!!!


		unsigned int nObject5 = 0x55667788;			// 1432778632 
	unsigned int* pnObject5 = &nObject5;			// 0x008ff6e0 адрес

	//Раскомментировав следующую строчку кода, обратите внимание на сообщение компилятора 
	//- он не считает преобразование "легальным" (безопасным)

	unsigned char* pucObject5;

	// pucObject5=static_cast<unsigned char*>(pnObject5);	// считает небезопасным преобразование, возможны серьезные потери данных переменной

	pucObject5 = reinterpret_cast<unsigned char*>(pnObject5);	//а такое
				//преобразование - целиком на совести программиста.
				//Его можно применять, только четко представляя себе
				//результат преобразования (2)

	//Откомментируйте (!) следующие строчки следующим образом:
	// сс=..., 	pucObject5 - изменился? 	*pucObject5=...

	char cc = *(pucObject5++);	// 0x88 // инкрементируем char на 1 байт и получаем младший байт
	cc = (*pucObject5)++;		// 0x77	 получаем второй младший байт

	cc = ++ * (pucObject5);		// получаем значение, увеличивая 0x77 на 1  = 0x79	// изменился nObject5=0x55667988
	cc = *(++pucObject5);		// 0x66 получаем 3-й байт
	stop

		///////////////////////////////////////////////////////////////
		//			Встроенные массивы                               
		///////////////////////////////////////////////////////////////

			//Задание 3. 
			//Имеется одномерный встроенный массив, проинициализированный при объявлении 
			//Отсортируйте массив по возрастанию значений. 
			//Используйте "пузырьковую" сортировку  
			// Правильность решения проверьте с помощью отладчика

	{
		int ar[] = { 5, 4, 7,  8, 1, 2, 6, 0, 10, 12, 77, 11,
					  6, 8, 33, 21, 1, 2, 3, 4};
		int sizeAr = sizeof(ar) / sizeof(int);  // размер массива

		// вариант без лишней сортировки
		for (size_t i = 0; i < sizeAr; i++)
		{
		bool flag = false;
		// поиск из оставшихся неупорядоченных чисел
		for (size_t j = 0; j < sizeAr - 1; j++)
		{
			if (ar[j + 1] < ar[j])
			{
				// обмен местами значения текущего и минимального элементов
				int temp = ar[j + 1];
				ar[j + 1] = ar[j];
				ar[j] = temp;

				flag = true;
				}
			}
			if (!flag)
			{
				break;
			}

			// вывод массива
			std::cout << i + 1 << " круг: \t";
			for (auto& i : ar)
			{
				std::cout << i << ",";
			}
			std::cout << std::endl;
		}
	}


		// *******************************************************
			//Задание 4  
			//в)Инициализация массива строковыми литералами:
			//Объявите массив указателей и проинициализируйте его строковыми литералами . 
			//Выведите  массив на печать.
		const char* pArrStr[4] = {"TEST", "TEST2"};		// отводит в статической памяти место для строки. Выделяет память под 2 указателя

		for (int i = 0; i < sizeof(pArrStr) / sizeof(pArrStr[0]); i++)
		{
			std::cout << pArrStr[i] << std::endl;
		}


// *******************************************************
	//Задание 5. 
	//a) Объявите одномерный неинициализированный массив ( размером N)
	//Задайте значения элементов с помощью генератора случайных чисел.
		
	//Подсказка 1: для генерации случайных чисел используйте функцию
	//стандартной библиотеки - rand() (<cstdlib>)
	// int tmp= rand(); // получим случайное значение в диапазоне от 0 до RAND_MAX
    	//значение RAND_MAX задано в файле <stdlib.h>  и равно  0x7fff
	
	//если Вам требуется задать иные границы диапазона при генерации случайного числа, 
	//то это можно сделать так:
	//v1 = rand() % 100;         // v1 в диапазоне 0 - 99
	//v2 = rand() % 100 + 1;     // v2 в диапазоне 1 - 100
	//v3 = rand() % 30 + 1985;   // v3 в диапазоне 1985-2014 
	
	//Подсказка 2: На самом деле те значения, которые создаются генератором случайных
	//чисел являются «псевдослучайными», то есть при двух последовательных запусках
	//приложения Вы получаете две одинаковые последовательности значений.
	//Для того чтобы генерируемые "случайные" значения были разными при каждом 
	//запуске приложения используйте функции стандартной библиотеки srand() (<cstdlib>)
	//и time() (<ctime>).
	//Функция srand() осуществляет «привязку» начала генерации к указанному в качестве параметра значению.
	//Функция time() задает эту точку отсчета, считывая текущее время
	//srand( time( 0 ) );
//(Подсказки в файле Алгоритмы для лабораторной работы_4. pdf)


	//б) Выведите массив на печать

	//в)Отсортируйте массив по убыванию значений. 
	//Используйте сортировку "выбором"

// 
	
// *******************************************************

	//Задание 7. 
	//Объявите встроенный одномерный массив, состоящий из N элементов целого типа. 
	//Напишите фрагмент кода, который вводит целые числа с помощью
	//потока ввода в объявленный Вами массив, каждый раз ( на каждой итерации!)
	//упорядочивая полученное значение по возрастанию.
	//Для проверки выводите массив на консоль на каждой итерации`

	
// *******************************************************
	//Задание 8. 

	//Простой поиск.
	//Модифицируйте предыдущее задание следующим образом:
	//очередное введенное значение помещается в массив только при условии, 
	//что там еще такого нет (то есть дубли игнорируются)

	 

// *******************************************************
	//Задание 9
	//Объявите одномерный встроенный массив элементов типа char.
	//Сформируйте значения элементов массива с помощью генератора случайных 
	//чисел таким образом, чтобы в массиве были только символы '*' и '_'  
	
	//"сдвиньте звездочки" в начало массива, например:
	//было - '*' '_' '_' '*' '*' '_' '*' '_' '*' '_'
	//стало: '*' '*' '*' '*' '*' '_' '_' '_' '_' '_'
	//и распечатайте массив 
//(Подсказки в файле Алгоритмы для лабораторной работы_4. pdf)

// *******************************************************
	//Задание 10
	//объявите одномерный встроенный массив  из N элементов и проинициализируйте его.
	//а) сдвиньте все элементы массива вправо на 1 позицию
	//б) (Циклическая перестановка). Сдвиньте все элементы массива вправо на 1 позицию , 
	//но последний элемент не должен быть утерян. Его следут переместить в начало.
	//например,  { 5, 2, 11, 4, 23, 9 } ->  {9, 5, 2, 11, 4, 23 }

	//в)(Кольцевой буфер) выведите массив на печать, циклически сдвинув элементы вправо на 1 позицию.
	//При решении задачи не следует перемещать элементы массива, а надо использовать кольцевой буфер.
	// Одномерный массив можно "свернуть" в кольцо и считать, что за последним элементом следует начальный и
	// потом установить "новое" начало массива.

// *******************************************************
	//Задание 11 (*)
	//алгоритм "тасования колоды"
	//объявите одномерный встроенный массив  из N элементов и 
	// заполните  его неповторяющимися числами из заданного отрезка 
	//натурального ряда, расположенными в случайном порядке
//(Подсказки в файле Алгоритмы для лабораторной работы_4.pdf)
//Алгоритм:
//Массив  A [N] инициализируется последовательными значениями из отрезка, например [0,N-1]
//index=N-1, где index- максимальное значение индекса.

//В цикле по index выполняется перемешивание значений:
//	1. Генерируется случайное число  R из отрезка [0, index]
//	2. Выполняется обмен значений A[index]  и  A[R]
//	3. index=index -1
//	4. Если index==0, то конец
//	5. Переход к шагу 1    

	
// *******************************************************

}