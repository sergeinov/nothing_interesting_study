
#include <string>
#include <iostream>
#include <cstdint>
#include <algorithm>
#include <iterator>
#include <memory>
#include"functions.h"
#include <vector>
#include"MySaveClass.h"
#include <list>
#include"MyArray.h"

using namespace std;

int main()
{
	
	//Задание 1. Сырые строковые литералы (Raw String Literals)
	//Выведите строку, например: my name is "Marina"
	//а) без использования Raw String Literals
	//б) посредством Raw String Literals
	//в) добавьте разделители (Delimeter)

	{
		std::cout << "my name is \"Marina\"" << std::endl;

		std::string str1 = R"(my name is "Marina")";							// использование префикс R  - предписывающий компилятору не обрабатывать \<символ>
		std::cout << str1 << std::endl;

		std::string str2 = R"delimeter(my name is "Marina")delimeter";			// использование delimeter
		std::cout << str2 << std::endl;
		__asm nop
	}

	//////////////////////////////////////////////////////////////////////////////////////////////
	//Задание 2. Реализуйте вычисление факториала с помощью constexpr-функции.
	//
	//Подсказки/напоминания: 
	//		- constexpr – функция должна состоять из единственной инструкции return <выражение>; (пока!)
	//		- но это выражение может включать вызов другой constexpr – функции, в частности рекурсивный
	//		  вызов 
	//		- если параметр рекурсивной constexpr- функции - это константа, компилятор вычислит результат
	//		  на этапе компиляции

	//Проверьте тот факт, что компилятор вычисляет значение на этапе компиляции (если в качестве
	//				параметра используется константа, известная компилятору на этапе компиляции).
	//				Для проверки достаточно создать встроенный массив с размерностью, вычисляемой
	//				посредством constexpr-функции:

	{	//Например:
		int ar[factorial(3)];

		//или
		constexpr int n = factorial(5);
		int ar1[n];

		//попробуйте:
		int m = 7;
		//constexpr int n1 = factorial(m);	// ошибка, значение не const
		//int ar1[n1];
		
		//а так?
		int n2 = factorial(m);

		__asm nop
	}
	
	//////////////////////////////////////////////////////////////////////////////////////////////
	//Задание 3a. Перевод с помощью пользовательского литерала из двоичного представления строкового
	//в значение, например: строку "100000000" -> в значение 256
	//Проверить результат посредством префикса 0b
	//Чтобы вызов пользовательского литерала выглядел просто и читаемо, например: 100000000_b
	//логично использовать пользовательский литерал с единственным параметром - const char*

	//Так как речь идет о литералах, логично вычислять значения на этапе компиляции
	// => реализуйте пользовательский литерал посредством constexpr - функций
	//Подсказка/напоминание: 
	//		- constexpr – функция должна состоять из единственной инструкции return <выражение>;
	//		- но это выражение может включать вызов другой constexpr – функции,
	//		- которая может быть рекурсивной (если параметр такой функции - это константа,
	//		  компилятор вычислит результат вызова рекурсивной функции на этапе компиляции)

	{
	/*constexpr*/ auto result = 100000000_convertToDec;
	std::cout << result << std::endl;			// 256
		__asm nop

	}

	//Задание 3b. Перевод в строковое двоичное представление, например: 256 -> "0b100000000"
	//Так как строка может быть любой длины, логичнее и проще возвращать объект std::string
	//=> возвращаемое значение не может быть constexpr!
	//Подсказка: манипулятора std::bin пока нет => преобразование в двоичную строку
	//придется делать вручную
	//Подсказка: количество разрядов в байте определяет константа CHAR_BIT - <cstdint>

	{
		std::string sBin= 256_toBinStr;		// 100000000
		__asm nop
	}


	//////////////////////////////////////////////////////////////////////////////////////////////
	//Задание 4а. constexpr - объекты 
	//Создать класс (шаблон класса?) для хранения и манипулирования диапазоном значений.
	//В классе должны быть:
	//	переменные для хранения минимального и максимального значений,
	//	методы для получения каждого из значений
	//	метод для проверки - попадает ли указанное значение в диапазон
	//	метод, который получает любое значение данного типа и формирует результирующее значение:
	//							если принадлежит диапазону, то его и возвращаем
	//							если меньше минимального значения, возвращаем минимальное
	//							если больше максимального значения, возвращаем максимальное

	//Проверьте тот факт, что компилятор вычисляет значение на этапе компиляции. 

	{
		constexpr MySaveClass test(0, 10);
		constexpr auto val = test.getMin();
		int res = test.findValue(-1);
		int res2 = test.findValue(3);

		MySaveClass test1("1"s, "2"s);
		//constexpr auto val1 = test1.getMax();		// ошибка

	__asm nop
	}	
	/***************************************************************/
//Задание 5.
	/*
	Реализуйте шаблон функции для печати любых последовательностей (vector, list, deque, set и встроенного массива), которые могут содержать:
	•	как объекты любого типа,
	•	так и указатели на объекты любого типа (указатели распечатывать неинтересно => в этом случае следует получать значение по адресу)
	Подсказки: if constexpr
	*/
	{
		std::vector<std::string> vec{"T-Shirt", "Shirt", "Tie", "Jacket"};
		PrintAll(vec);

		std::list<std::string*> l{ new std::string("ZZZ"), new std::string("AAA") };
		PrintAll(l);

		// delete l
		l.clear();
		
		__asm nop
	}

	/***************************************************************/
	//Задание 6.
		/* Реализуйте шаблон функции сложения двух значений.
		Если первое слагаемое является вектором, то все элементы вектора нужно увеличить на значение второго параметра. При этом элементы вектора и второй параметр должны быть одного и того же типа.
		Подсказки: if constexpr, is_same
		*/
	{
		std::vector<int> vect{ 3,4,5,6,7 };
		auto result = Sum(vect, 5);
		auto result2 = Sum(10, 5);			// ошибка первое слагаемое не вектор
		std::cout << "\nVector:" << std::endl;
		for ( const auto& i : vect )
		{
			std::cout << i << " ";
		}

		__asm nop
	}


	/***************************************************************/
//Задание 7.
	/* 	Реализуйте шаблон функции вывода на печать значений элементов любого адаптера (stack, queue, priority_queue)
	Подсказки: if constexpr, is_same
	Предусмотрите вывод значений, если в адаптере хранятся указатели.
	*/
	{
		std::queue<std::string> q;
		q.push("Lead");
		q.push("Build");
		q.push("Release");
		PrintAdapter(q);

		std::queue<std::string, std::list<std::string>> q1;
		q1.push("Lead");
		q1.push("Build");
		q1.push("Release");
		PrintAdapter(q1);

		stack <int> st;
		st.push(10);
		st.push(20);
		st.push(30);
		PrintAdapter(st);

		__asm nop
	}

	/***************************************************************/
//Задание 8.
	/* 	Реализуйте шаблон constexpr функции Smth(), которая должна возвращать значения разного типа
	Подсказки: constexpr, if constexpr
	*/
	/*const int x1 = 1;
	const double x2 = 2.2;
	const char* x3 = "abc";*/

	constexpr int res1 = Smth<1>();							//res1 = 1
	constexpr double res2 = Smth<2>();							//res2 = 2.2
	//  /*constexpr???*/ std::string res3 = Smth(3);				//res3 = "abc"

	__asm nop
	//***************************************************************/
	//Задание 9.

		/*Пользовательский deduction guide – для вывода типов параметров шаблона
		Задан шаблон класса, который инкапсулирует внедренный ограниченный массив известной
		размерности с элементами любого типа. */
		
		

		
		//Требуется обеспечить работоспособность приведенных примеров использования.
			{
				MyArray<int, 5> ar1;

				MyArray ar2("ABC");
				MyArray<char, 4> ar22;
				int ar[] = { 1,2,3 };
				MyArray ar3{ ar };

				MyArray<int, 5> ar33{ar, 3};

				__asm nop
			}
		

	
}